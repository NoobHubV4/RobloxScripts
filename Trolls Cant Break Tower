print([[
     Commands:
        slap [plr,all] | Slap the Player
        loopslap [plr,all] | Loop Slap the Player
        unloopslap [plr,all] | Unloop Slap the Player
        whitelist / wl [plr] | Whitelisted Player
        unwhitelist / unwl [plr] | Blacklisted Player
        slapaura [plr] | Give Slap Aura Player
        unslapaura [plr] | Revoke Slap Aura Player
        rejoin / rj | Rejoin the server
        unload | Unloaded The Script
        prefix [Prefix] | Change Prefix
        goto [plr] | Goto Player
        slaptool | get the slap
        autoslap | Auto Slap (if Player Equip Tool)
        unautoslap | Stop Auto Slap
        loopgoto / loopto [plr] | Loop Goto Player
        unloopgoto / unloopto [plr] | UnLoop Goto Player
]])
local Prefix = ";"
local Players = game.Players
local LocalPlayer = Players.LocalPlayer
local Unloaded = true
local Key = false
local UserInputService = game:GetService("UserInputService")

local Notif = function(Title, Text, Duration)
	local Duration = Duration
	if not Duration then
		Duration = 3
	end
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = Title;
		Text = Text;
		Icon = "";
		Duration = Duration;
	})
end

Notif("Checking", "Check Id Game")
wait(.1)
if game.PlaceId == 14493533447 or game.PlaceId == 126778923293974 then
        Unloaded = false
        Notif("Trolls Cant Break Tower", "Press M to load script")
else
        Unloaded = true
        Notif("Error", "Game Not Support")
end

function LocalScript()
local Whitelisted = {}
local Loops = {
      Slaps = {
      All = false,
      Plr = {},
      Aura = {},
      },
      Goto = {},
}
local SavedPositions = {};
local States = {};
local ViewPlr = {};
local Tower = Instance.new("ScreenGui", game.Players.LocalPlayer.PlayerGui)
Tower.Name = "Tower"
Tower.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Tower.ResetOnSpawn = false
local ExecBar = Instance.new("TextBox", Tower)
ExecBar.Name = "ExecBar"
ExecBar.BackgroundColor3 = Color3.fromRGB(172, 172, 172)
ExecBar.BackgroundTransparency = 0.400
ExecBar.Position = UDim2.new(0.0255349874, 0, 0.800595582, 0)
ExecBar.Size = UDim2.new(0, 278, 0, 33)
ExecBar.Font = Enum.Font.SourceSans
ExecBar.PlaceholderText = "Command Bar"
ExecBar.PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
ExecBar.Text = ""
ExecBar.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecBar.TextSize = 23.000
ExecBar.ClearTextOnFocus = false
ExecBar.Draggable = true

function getSlap()
        SavedPositions.OldCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
        repeat wait()
           LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-74.6737823, 27.9878864, -23.4574356, -0.192965299, -0.000979838311, 0.981205106, 3.97876107e-11, 0.999999523, 0.000998606556, -0.981205583, 0.000192696447, -0.192965195)
        until LocalPlayer.Backpack:FindFirstChild("SlapTool")
        LocalPlayer.Character.HumanoidRootPart.CFrame = SavedPositions.OldCFrame
end

function CheckWhitelist(args)
        return not (Whitelisted[args.UserId])
end

function CPing(ConvertToHuman, OneWayTrip)
	if ConvertToHuman then
		return OneWayTrip and LocalPlayer:GetNetworkPing() * 1000 or game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()
	else
		return OneWayTrip and LocalPlayer:GetNetworkPing() or game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue() / 1000
	end
end

local PlrFromArgs = function(plr, args)
	if plr and plr:lower() == "me" then
		return args
        elseif plr and plr:lower() == "random" then
        local DaPlayers = Players:GetPlayers()
	local DaIndex = math.random(1, #DaPlayers)
	local ToReturn = DaPlayers[DaIndex]
	if args and ToReturn.UserId == args.UserId then
		DaPlayers = Players:GetPlayers(); DaIndex = math.random(1, #DaPlayers); ToReturn = DaPlayers[DaIndex]
	end
	return ToReturn
	elseif not plr and not args then
		return false
	elseif not plr and args then
		return args
	end
	local foundplr = false
	for i,v in pairs(Players:GetPlayers()) do
		local Name, DisplayName = v.Name:lower(), v.DisplayName:lower()
		if Name:sub(1, #plr) == plr:lower() or DisplayName:sub(1, #plr) == plr:lower() then
			foundplr = v
		end
	end
	return foundplr
end

function Slap(arg)
        local char = LocalPlayer.Character
        local back = LocalPlayer.Backpack
        local tool = char:FindFirstChild("GoldSlapTool") or char:FindFirstChild("BlueSlapTool") or char:FindFirstChild("SlapTool") or back:FindFirstChild("GoldSlapTool") or back:FindFirstChild("BlueSlapTool") or back:FindFirstChild("SlapTool")
        local targetPart = arg.Character and arg.Character:FindFirstChild("HumanoidRootPart")
                if targetPart then
                        coroutine.wrap(function()
                            pcall(function()
                                -- Fire remote with extreme upward force
                                tool.Event:FireServer("slash", arg.Character, targetPart.Position, Vector3.new(0, 500000, 0))
                                -- Apply massive upward velocity to target
                                if targetPart and targetPart.Parent:FindFirstChild("BodyVelocity") == nil then
                                    local bodyVelocity = Instance.new("BodyVelocity")
                                    bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
                                    bodyVelocity.Velocity = Vector3.new(0, SLAP_POWER, 0)
                                    bodyVelocity.Parent = targetPart
                                    game.Debris:AddItem(bodyVelocity, 0.5)
                                end
                            end)
                        end)()
                end
end

function SlapAll()
        local char = LocalPlayer.Character
        local back = LocalPlayer.Backpack
        local tool = char:FindFirstChild("GoldSlapTool") or char:FindFirstChild("BlueSlapTool") or char:FindFirstChild("SlapTool") or back:FindFirstChild("GoldSlapTool") or back:FindFirstChild("BlueSlapTool") or back:FindFirstChild("SlapTool")
        for _, arg in pairs(game.Players:GetPlayers()) do
                  if arg ~= LocalPlayer and CheckWhitelist(arg) then
        local targetPart = arg.Character and arg.Character:FindFirstChild("HumanoidRootPart")
                if targetPart then
                        coroutine.wrap(function()
                            pcall(function()
                                -- Fire remote with extreme upward force
                                tool.Event:FireServer("slash", arg.Character, targetPart.Position, targetPart.Position)
                                -- Apply massive upward velocity to target
                                if targetPart and targetPart.Parent:FindFirstChild("BodyVelocity") == nil then
                                    local bodyVelocity = Instance.new("BodyVelocity")
                                    bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
                                    bodyVelocity.Velocity = Vector3.new(0, SLAP_POWER, 0)
                                    bodyVelocity.Parent = targetPart
                                    game.Debris:AddItem(bodyVelocity, 0.5)
                                end
                            end)
                        end)()
                end
                                end
                      end
end

Tasks = {
	AutoSlap = function(args)
		if args == "hostile" then
			if not States.SlapHostile then
				States.SlapHostile = true
				task.spawn(function()
					while States.SlapHostile do task.wait()
						pcall(function()
							for i,v in pairs(Players:GetPlayers()) do
								if v.Character and CheckWhitelist(v) and v ~= LocalPlayer then
									if v.Character:FindFirstChildOfClass("Humanoid") then
										local ch = v.Character
										if ch:FindFirstChild("GoldSlapTool") or ch:FindFirstChild("BlueSlapTool") or ch:FindFirstChild("SlapTool") then
											Slap(v)
										end
									end
								end
							end
						end)
					end
				end)
			else
				Notif("Error", "Already killing hostiles.")
			end
                end
        end;
};
local chatdebounce = false
function OnCommand(text)
        if Unloaded then return end
        local Args = text:split(" ")
	if not Args[1] then
		chatdebounce = nil
		return
	end
	if Args[1] == "/e" or Args[1] == "/c" or Args[1] == "/t" or Args[1] == "/" then
		table.remove(Args, 1)
	end
	if Args[1] == "/w" then
		table.remove(Args, 1)
		if Args[2] then
			table.remove(Args, 1)
		end
	end
	if not (Args[1]:sub(1, #Prefix) == Prefix) then
		chatdebounce = nil
		return
	end
	local function cm(args)
		return args == Args[1]:sub(#Prefix+1):lower()
	end
        if cm("slap") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Slap(DaPlayer)
                        Notif("Successfully", "Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        SlapAll()
                        Notif("Successfully", "Slap All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("loopslap") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Slaps.Plr[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Loop Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Slaps.All = true
                        Notif("Successfully", "Loop Slap All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unloopslap") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Slaps.Plr[DaPlayer.UserId] = nil
                        Notif("Successfully", "Loop Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Slaps.All = false
                        Notif("Successfully", "UnLoop Slap All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("whitelist") or cm("wl") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Whitelisted[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Whitelist "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unwhitelist") or cm("unwl") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Whitelisted[DaPlayer.UserId] = nil
                        Notif("Successfully", "Blacklist "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("slapaura") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Loops.Slaps.Aura[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Give slapaura "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unslapaura") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Loops.Slaps.Aura[DaPlayer.UserId] = nil
                        Notif("Successfully", "Revoke slapaura "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("rejoin") or cm("rj") then
                game.Players.LocalPlayer:Kick("You were banned")
                wait(.5)
                game:FindService("TeleportService"):Teleport(game.PlaceId)
        elseif cm("unload") then
                Unloaded = true
                ScreenGui:Destroy()
                Notif("Unload", "Unload the Scripter")
        elseif cm("prefix") then
                local New = Args[2]
		if New and tostring(New) then
			local Prefixn = tostring(New)
			Prefix = Prefixn
			Notif("Successfully", "prefix set to "..New)
		else
			Notif("Error", "no prefix selected?")
		end
        elseif cm("goto") or cm("to") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = DaPlayer.Character.HumanoidRootPart.CFrame
                        Notif("Successfully", "Goto "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("slaptool") then
                getSlap()
                Notif("Successfully", "Get Slap")
        elseif cm("autoslap") then
                Tasks.AutoSlap("hostile")
                Notif("Successfully", "Automatically slaping hostile player(s)")
        elseif cm("unautoslap") then
                States.SlapHostile = false
                Notif("Successfully", "Stopped slap hostile")
        elseif cm("loopgoto") or cm("loopto") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Goto[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Loop Goto "..DaPlayer.DisplayName)
                end
        elseif cm("unloopgoto") or cm("unloopto") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Goto[DaPlayer.UserId] = nil
                        Notif("Successfully", "UnLoop Goto "..DaPlayer.DisplayName)
                end
        elseif cm("view") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        ViewPlr[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "View "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unview") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        ViewPlr[DaPlayer.UserId] = nil
                        wait(.25)
                        workspace.CurrentCamera.CameraSubject = LocalPlayer.Character
                        Notif("Successfully", "UnView "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        else
                Notif("Error", tostring(Args[1]).." is a valid command.")
        end
end
Players.PlayerAdded:Connect(function(plr)
        if Loops.Slaps.Plr[plr.UserId] then
		Loops.Slaps.Plr[plr.UserId] = plr
	end
        if Whitelisted[plr.UserId] then
                Whitelisted[plr.UserId] = plr
        end
        if Loops.Slaps.Auras[plr.UserId] then
                Loops.Slaps.Auras[plr.UserId] = plr
        end
        if Loops.Goto[plr.UserId] then
                Loops.Goto[plr.UserId] = plr
        end
        if ViewPlr[plr.UserId] then
                ViewPlr[plr.UserId] = plr
        end
end)
LocalPlayer.Chatted:Connect(function(t)
	if not chatdebounce then
		chatdebounce = true
		local success, errors = pcall(function()
			OnCommand(t)
		end); if not success then
			-- nothing
		end
		task.wait(.6);chatdebounce = nil
	end
end)
ExecBar.FocusLost:Connect(function(enterPressed, inputObj)
	if ExecBar.Text == "" then
		return
	end
	if enterPressed then
		local success, errors = pcall(function()
			if string.sub(ExecBar.Text, 0, 1) == Prefix then
				OnCommand(ExecBar.Text)
			else
				OnCommand(Prefix .. ExecBar.Text)
			end
		end)
		if not success then
			--nothing
		end
		task.wait(.2)
		ExecBar.Text = ""
	end
end)
task.spawn(function()
        task0 = function()
                if Unloaded then return end
                if Loops.Slaps.All then
                        SlapAll()
                end
                if Loops.Slaps.Plr then
			for i,v in next, Loops.Slaps.Plr do
				Slap(v)
			end
                end
                if Loops.Slaps.Aura then
                        for i,v in next, Loops.Slaps.Aura do
				if v.Character then
					local VPart = v.Character:FindFirstChildWhichIsA("BasePart")
					for _, Targets in pairs(Players:GetPlayers()) do
						if Targets ~= v and Targets.Character then
							local TPart = Targets.Character:FindFirstChildWhichIsA("BasePart")
							if VPart and TPart and CheckWhitelist(Targets) and Targets ~= LocalPlayer then
								if (TPart.Position-VPart.Position).Magnitude <= 10 then
									Slap(Targets)
								end
							end
						end
					end
				end
			end
                end
                if Loops.Goto then
                        for _,Target in next, Loops.Goto do
                                LocalPlayer.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame
                        end
                end
                if ViewPlr then
                        for _,b in next, ViewPlr do
                                workspace.CurrentCamera.CameraSubject = b.Character
                        end
                end
        end
        while task.wait() do
                pcall(task0)
        end
end)
Notif("Trolls Cant Break Tower", "Script Loaded!")
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not Unloaded then
	        if input.KeyCode == Enum.KeyCode.M and not Key then
		        Key = true
                        LocalScript()
                end
	end
end)

if not Unloaded then
local VirtualInputManager = game:GetService("VirtualInputManager") or game:FindFirstDescendant("VirtualInputManager")

local ScreenGui = Instance.new("ScreenGui")
local SpamBtn = Instance.new("TextButton")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = true

SpamBtn.Name = "SpamBtn"
SpamBtn.Parent = ScreenGui
SpamBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
SpamBtn.Position = UDim2.new(0, 0, 0.395768493, 0)
SpamBtn.Size = UDim2.new(0, 100, 0, 45)
SpamBtn.Font = Enum.Font.Arcade
SpamBtn.Text = "Scam Press M"
SpamBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
SpamBtn.TextScaled = true
SpamBtn.TextSize = 14.000
SpamBtn.TextStrokeTransparency = 0.000
SpamBtn.TextWrapped = true
SpamBtn.Visible = true
SpamBtn.Draggable = true
SpamBtn.MouseButton1Click:Connect(function()
      VirtualInputManager:SendKeyEvent(true,"M",false,game)
      ScreenGui:Destroy()
end)
end
