print([[
Commands:
        slap [plr,all,random] | Slap the Player
        loopslap [plr,all] | Loop Slap the Player
        unloopslap [plr,all] | Unloop Slap the Player
        whitelist / wl [plr] | Whitelisted Player
        unwhitelist / unwl [plr] | Blacklisted Player
        slapaura [plr] | Give Slap Aura Player
        unslapaura [plr] | Revoke Slap Aura Player
        rejoin / rj | Rejoin the server
        unload | Unloaded The Script
        prefix [Prefix] | Change Prefix
        goto [plr,random] | Goto Player
        slaptool | get the slap
        autoslap | Auto Slap (if Player Equip Tool)
        unautoslap | Stop Auto Slap
        loopgoto / loopto [plr] | Loop Goto Player
        unloopgoto / unloopto [plr] | UnLoop Goto Player
        kill [plr,all,random] | Kill Player or all
        loopkill / lk [plr,all] | Loop Kill Player or all
        unloopkill / unlk [plr,all] | UnLoop Kill Player or all
        killaura [plr] | Give killaura Player
        unkillaura [plr] | Remove killaura player
        autokill | Auto Kill Player (If Player Equip Slap)
        unautokill | Stopped kill hostiles
        refresh / re | Refresh Your Character
        respawn / res | Respawn Your Character
        autorefresh / autore [on/off] | Auto Respawn Player (Save Position)
        clickslap [on/off] | Click To Slap Player
        clickkill [on/off] | Click To Kill Player
        autoslaptool [on/off] | Auto Get Slap
        void [plr,all,random] | Tp player the void
        loopvoid [plr,all] | Loop Tp player the void
        unloopvoid [plr,all] | Stopped Loop Tp player the void
        autoflyingcarpet / autocarpet [on/off] | Auto Get Item Flying Carpet
        flyingcarpet / carpet | Get Item Flying Carpet
        commands / cmds | Show a commands list
]])
local Prefix = ":"
local Players = game.Players
local LocalPlayer = Players.LocalPlayer
local Unloaded = true
local Key = false
local UserInputService = game:GetService("UserInputService")

local Notif = function(Title, Text, Duration)
	local Duration = Duration
	if not Duration then
		Duration = 3
	end
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = Title;
		Text = Text;
		Icon = "";
		Duration = Duration;
	})
end
Notif("Checking", "Check Id Game")
wait(1)
if game.PlaceId == 14493533447 then
        Unloaded = false
        Notif("Trolls Cant Break Tower", "Press M to load script")
else
        Notif("Error", "Game Not Support")
end

function LocalScript()
local Whitelisted = {};
local Loops = {
      Slaps = {
            All = false;
            Plr = {};
            Aura = {};
      };
      Goto = {};
      Kills = {
            All = false;
            Plr = {};
            Aura = {};
      };
      Voids = {
            All = false;
            Plr = {};
            Aura = {};
      };
};
local SavedPositions = {};
local States = {
      AutoRespawn = true;
      ClickSlap = false;
      ClickKill = false;
      AutoSlapTool = false;
      AutoFlyingCarpet = false;
      LessCooldown = true;
};
local ViewPlr = {};
local Connections = {};
local Tower = Instance.new("ScreenGui", game.Players.LocalPlayer.PlayerGui)
Tower.Name = "Tower"
Tower.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Tower.ResetOnSpawn = false
local ExecBar = Instance.new("TextBox", Tower)
ExecBar.Name = "ExecBar"
ExecBar.BackgroundColor3 = Color3.fromRGB(172, 172, 172)
ExecBar.BackgroundTransparency = 0.400
ExecBar.Position = UDim2.new(0.0255349874, 0, 0.800595582, 0)
ExecBar.Size = UDim2.new(0, 278, 0, 33)
ExecBar.Font = Enum.Font.SourceSans
ExecBar.PlaceholderText = "Command Bar"
ExecBar.PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
ExecBar.Text = ""
ExecBar.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecBar.TextSize = 23.000
ExecBar.ClearTextOnFocus = false
ExecBar.Draggable = true

function FindSlapTool()
        for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name:lower():find("slap") then
            return tool
        end
    end
    local char = LocalPlayer.Character
    if char then
        for _, tool in pairs(char:GetChildren()) do
            if tool:IsA("Tool") and tool.Name:lower():find("slap") then
                return tool
            end
        end
     end
end

function FindCharacterSlapTool()
        local char = LocalPlayer.Character
        if char then
            for _, tool in pairs(char:GetChildren()) do
                if tool:IsA("Tool") and tool.Name:lower():find("slap") then
                    return tool
                end
            end
        end
end

function getSlap()
        local tool = FindSlapTool()
        if tool then
                --
        else
                SavedPositions.OldPos = LocalPlayer.Character.HumanoidRootPart.CFrame
                repeat task.wait()
                        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(479.653442, 15.8912525, 4.14005041, -0.0112610189, -0.0141247334, 0.999836802, -3.18337058e-11, 0.999900222, 0.0141256293, -0.999936581, 0.00015906895, -0.0112598957)
                until LocalPlayer.Backpack:FindFirstChild("GlichSlapTool")
                for i = 1,5 do
                        LocalPlayer.Character.HumanoidRootPart.CFrame = SavedPositions.OldPos
                end
                wait(.05)
                SavedPositions.OldPos = nil
        end
end

function getFlyingCarpet()
        local char = LocalPlayer.Character
        local back = LocalPlayer.Backpack
        if char:FindFirstChild("FlyingCarpet") or back:FindFirstChild("FlyingCarpet") then
                --
        else
                SavedPositions.OldPos = LocalPlayer.Character.HumanoidRootPart.CFrame
                repeat task.wait()
                        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(139.906082, 290.181061, -49.6262054, -0.013800065, 0.0627218783, 0.997935653, -1.77467083e-10, 0.998030663, -0.0627278537, -0.999904752, -0.000865648617, -0.0137728881)
                until LocalPlayer.Backpack:FindFirstChild("FlyingCarpet")
                for i = 1,5 do
                        LocalPlayer.Character.HumanoidRootPart.CFrame = SavedPositions.OldPos
                end
                wait(.05)
                SavedPositions.OldPos = nil
        end
end

function getEvent()
        local tool = FindSlapTool()
        if tool and tool:FindFirstChild("Event") then
                return tool.Event
        end
end

function TargetVelocity(player, Power, Item, Force)
        local targetPart = player.Character and player.Character:FindFirstChildOfClass("Part")
        if targetPart then
                if targetPart and targetPart.Parent:FindFirstChild("BodyVelocity") == nil then
                        local arah = Vector3.new(math.huge, math.huge, math.huge).Unit
                        local bodyVelocity = Instance.new("BodyVelocity")
                        bodyVelocity.MaxForce = Force
                        bodyVelocity.Velocity = arah * Power -- Power set to value
                        bodyVelocity.P = math.huge
                        bodyVelocity.Parent = targetPart
                        game.Debris:AddItem(bodyVelocity, Item)
                end
        end
end

function SlapEvent(target, Pos, Pos2)
        getSlap()
        local Event = getEvent()
        coroutine.wrap(function()
                pcall(function()
                -- Fire remote with extreme upward force
                Event:FireServer("slash", target.Character, Pos, Pos2)
                -- Apply massive upward velocity to target
                TargetVelocity(target, math.huge, math.huge, Vector3.new(math.huge, math.huge, math.huge))
                end)
        end)()
end

function CheckWhitelist(args)
        return not (Whitelisted[args.UserId])
end

local PlrFromArgs = function(plr, args)
	if plr and plr:lower() == "me" then
		return args
	elseif not plr and not args then
		return false
	elseif not plr and args then
		return args
	end
	local foundplr = false
	for i,v in pairs(Players:GetPlayers()) do
		local Name, DisplayName = v.Name:lower(), v.DisplayName:lower()
		if Name:sub(1, #plr) == plr:lower() or plr:sub(1, #plr) == plr:lower() then
			foundplr = v
		end
	end
	return foundplr
end

function GetRandomPlr()
        local DaPlayers = Players:GetPlayers()
	local DaIndex = math.random(1, #DaPlayers)
	local ToReturn = DaPlayers[DaIndex]
	if args and ToReturn.UserId == args.UserId then
		DaPlayers = Players:GetPlayers(); DaIndex = math.random(1, #DaPlayers); ToReturn = DaPlayers[DaIndex]
	end
	return ToReturn
end

function Slap(targets)
        SlapEvent(targets, LocalPlayer.Character.HumanoidRootPart.Position, Vector3.new(0, 1000000, 0))
end

function SlapAll()
        for i,v in pairs(game.Players:GetPlayers()) do
		if v ~= LocalPlayer and CheckWhitelist(v) then
                        Slap(v)
                end
        end
end

function Kill(targets)
        SlapEvent(targets, Vector3.new(-math.huge, -math.huge, -math.huge), Vector3.new(-math.huge, -math.huge, -math.huge))
end

function KillAll()
        for i,v in pairs(game.Players:GetPlayers()) do
		if v ~= LocalPlayer and CheckWhitelist(v) then
                        Kill(v)
                end
        end
end

function Void(targets)
        SlapEvent(targets, Vector3.new(math.huge, math.huge, math.huge), Vector3.new(math.huge, math.huge, math.huge))
end

function VoidAll()
        for i,v in pairs(game.Players:GetPlayers()) do
		if v ~= LocalPlayer and CheckWhitelist(v) then
                        Void(v)
                end
        end
end

function SlapPower()
        local tool = FindSlapTool()
        if tool:FindFirstChild("Power") then
        tool.Power.Value = math.huge
        end
        if tool:FindFirstChild("Cooldown") then
        tool.Cooldown.Value = 0
        end
        tool.Activated:Connect(function()
          if States.SlapPower then
             for _, plr in pairs(Players:GetPlayers()) do  
                 if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then  
                     local dist = (plr.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude  
                     if dist <= 10 then
                            TargetVelocity(plr, math.huge, math.huge, Vector3.new(math.huge, math.huge, math.huge))
                     end  
                 end  
             end
          end
        end)
end

function Refresh()
        SavedPositions.OldCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
        game.Players.LocalPlayer.Character.Humanoid.Health = 0
        LocalPlayer.CharacterAdded:Wait() wait(.05)
        for i = 1,10 do
                LocalPlayer.Character.HumanoidRootPart.CFrame = SavedPositions.OldCFrame
        end
        wait(.05)
        SavedPositions.OldCFrame = nil
end

Tasks = {
	AutoSlap = function(args)
		if args == "hostile" then
			if not States.SlapHostile then
				States.SlapHostile = true
				task.spawn(function()
					while States.SlapHostile do task.wait()
						pcall(function()
							for i,v in pairs(Players:GetPlayers()) do
								if v.Character and CheckWhitelist(v) then
									if v.Character:FindFirstChildOfClass("Humanoid") and v ~= LocalPlayer then
										local ch = v.Character
										if ch:FindFirstChild("GoldSlapTool") or ch:FindFirstChild("BlueSlapTool") or ch:FindFirstChild("SlapTool") or ch:FindFirstChild("GlichSlapTool") then
											Slap(v)
										end
									end
								end
							end
						end)
					end
				end)
			else
				Notif("Error", "Already slaping hostiles.")
			end
                end
        end;
        AutoKill = function(args)
		if args == "hostile" then
			if not States.KillHostile then
				States.KillHostile = true
				task.spawn(function()
					while States.KillHostile do task.wait()
						pcall(function()
							for i,v in pairs(Players:GetPlayers()) do
								if v.Character and CheckWhitelist(v) then
									if v.Character:FindFirstChildOfClass("Humanoid") and v ~= LocalPlayer then
										local ch = v.Character
										if ch:FindFirstChild("GoldSlapTool") or ch:FindFirstChild("BlueSlapTool") or ch:FindFirstChild("SlapTool") or ch:FindFirstChild('GlichSlapTool') then
											Kill(v)
										end
									end
								end
							end
						end)
					end
				end)
			else
				Notif("Error", "Already killing hostiles.")
			end
                end
        end;
};
local chatdebounce = false
function OnCommand(text)
        if Unloaded then return end
        local Args = text:split(" ")
	if not Args[1] then
		chatdebounce = false
		return
	end
	if Args[1] == "/e" or Args[1] == "/c" or Args[1] == "/t" or Args[1] == "/" then
		table.remove(Args, 1)
	end
	if Args[1] == "/w" then
		table.remove(Args, 1)
		if Args[2] then
			table.remove(Args, 1)
		end
	end
	if not (Args[1]:sub(1, #Prefix) == Prefix) then
		chatdebounce = false
		return
	end
	local function cm(args)
		return args == Args[1]:sub(#Prefix+1):lower()
	end
        if cm("slap") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Slap(DaPlayer)
                        Notif("Successfully", "Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        SlapAll()
                        Notif("Successfully", "Slap All")
                elseif ar == "random" then
                        local DaRandom = GetRandomPlr()
                        if DaRandom ~= LocalPlayer then
                                Slap(DaRandom)
                                Notif('Successfully', "Slap "..DaRandom.DisplayName)
                        end
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("loopslap") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Slaps.Plr[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Loop Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Slaps.All = true
                        Notif("Successfully", "Loop Slap All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unloopslap") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Slaps.Plr[DaPlayer.UserId] = nil
                        Notif("Successfully", "UnLoop Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Slaps.All = false
                        Notif("Successfully", "UnLoop Slap All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("whitelist") or cm("wl") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Whitelisted[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Whitelist "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unwhitelist") or cm("unwl") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Whitelisted[DaPlayer.UserId] = nil
                        Notif("Successfully", "Blacklist "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("slapaura") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Loops.Slaps.Aura[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Give slapaura "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unslapaura") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Loops.Slaps.Aura[DaPlayer.UserId] = nil
                        Notif("Successfully", "Remove slapaura "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("rejoin") or cm("rj") then
                game.Players.LocalPlayer:Kick("You were banned")
                wait(.5)
                game:FindService("TeleportService"):Teleport(game.PlaceId)
        elseif cm("unload") then
                Unloaded = true
                Tower:Destroy()
                Connections.PlayerAdded:Disconnect()
                Connections.PlayerRemoving:Disconnect()
                Connections.Chatted:Disconnect()
                Connections.Focus:Disconnect()
                Connections.CharacterAdded:Disconnect()
                Notif("Unload", "Unload the Scripter")
        elseif cm("prefix") then
                local New = Args[2]
		if New and tostring(New) then
			local PrefixNew = tostring(New)
			Prefix = PrefixNew
			Notif("Successfully", "prefix set to "..New)
		else
			Notif("Error", "no prefix selected?")
		end
        elseif cm("goto") or cm("to") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = DaPlayer.Character.HumanoidRootPart.CFrame
                        Notif("Successfully", "Goto "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "random" then
                        local DaRandom = GetRandomPlr()
                        if DaRandom ~= LocalPlayer then
                                LocalPlayer.Character.HumanoidRootPart.CFrame = DaRandom.Character.HumanoidRootPart.CFrame
                                Notif('Successfully', "Slap "..DaRandom.DisplayName)
                        end
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("slaptool") then
                getSlap()
                Notif("Successfully", "Get Slap")
        elseif cm("autoslap") then
                Tasks.AutoSlap("hostile")
                Notif("Successfully", "Automatically slaping hostile player(s)")
        elseif cm("unautoslap") then
                States.SlapHostile = false
                Notif("Successfully", "Stopped slap hostile")
        elseif cm("loopgoto") or cm("loopto") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        SavedPositions.OldCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
                        wait(.05)
                        Loops.Goto[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Loop Goto "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unloopgoto") or cm("unloopto") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Goto[DaPlayer.UserId] = nil
                        LocalPlayer.Character.HumanoidRootPart.CFrame = SavedPositions.OldCFrame
                        Notif("Successfully", "UnLoop Goto "..DaPlayer.DisplayName)
                else
                       Notif("Error", "Not Player in Server")
                end
        elseif cm("view") then
                local DaPlayer = PlrFromArgs(Args[2], false)
		if DaPlayer then
                        for i,v in pairs(Players:GetPlayers()) do
                                if v ~= LocalPlayer then
			                if ViewPlr[v.UserId] then
				                ViewPlr[v.UserId] = nil
				                wait(.3)
                                        end
			        end
                        end
			ViewPlr[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "View "..DaPlayer.DisplayName)
			task.spawn(function()
				while wait(.05) do
					pcall(function()
                                                if ViewPlr then
                                                        for _,target in next, ViewPlr do
						                workspace.CurrentCamera.CameraSubject = DaPlayer.Character:FindFirstChildOfClass("Humanoid")
                                                        end
                                                end
					end)
					if not DaPlayer or not ViewPlr[DaPlayer.UserId] then
						workspace.CurrentCamera.CameraSubject = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
						break
					end
				end
			end)
		elseif not DaPlayer then
                        Notif("Error", "Not Player in server")
                end
        elseif cm("unview") then
                for i,v in pairs(game.Players:GetPlayers()) do
                        ViewPlr[v.UserId] = nil
                end
		wait()
		game:GetService("Workspace").Camera.CameraSubject = LocalPlayer.Character.Humanoid
                Notif("Successfully", "View "..LocalPlayer.DisplayName)
        elseif cm("kill") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Kill(DaPlayer)
                        Notif("Successfully", "Kill "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        KillAll()
                        Notif("Successfully", "Kill All")
                elseif ar == "random" then
                        local DaRandom = GetRandomPlr()
                        if DaRandom ~= LocalPlayer then
                                Kill(DaRandom)
                                Notif('Successfully', "Kill "..DaRandom.DisplayName)
                        end
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("loopkill") or cm("lk") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Kills.Plr[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Loop Kill "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Kills.All = true
                        Notif("Successfully", "Loop Kill All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unloopkill") or cm("unlk") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Kills.Plr[DaPlayer.UserId] = nil
                        Notif("Successfully", "Loop Kill "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Kills.All = false
                        Notif("Successfully", "UnLoop Kill All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("killaura") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Loops.Kills.Aura[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Give killaura "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unkillaura") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Loops.Kills.Aura[DaPlayer.UserId] = nil
                        Notif("Successfully", "Remove killaura "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("autokill") then
                Tasks.AutoKill("hostile")
                Notif("Successfully", "Automatically killing hostile player(s)")
        elseif cm("unautokill") then
                States.KillHostile = false
                Notif("Successfully", "Stopped kill hostile")
        elseif cm("refresh") or cm("re") then
                Refresh()
                Notif("Successfully", "Refresh Character")
        elseif cm("respawn") or cm("res") then
                States.AutoRespawn = false
                wait(.1)
                LocalPlayer.Character.Humanoid.Health = 0
                wait(.1)
                States.AutoRespawn = true
                Notif("Successfully", "Respawn Character")
        elseif cm("autorefresh") or cm("autore") then
                if Args[2] == "on" or Args[2] == "true" then
                       States.AutoRespawn = true
                elseif Args[2] == "off" or Args[2] == "false" then
                       States.AutoRespawn = false
                elseif not Args[2] then
                       States.AutoRespawn = not States.AutoRespawn
                end
                Notif('Successfully', "Auto Respawn set to "..tostring(States.AutoRespawn))
        elseif cm("clickslap") then
                if Args[2] == "on" or Args[2] == "true" then
                       States.ClickSlap = true
                elseif Args[2] == "off" or Args[2] == "false" then
                       States.ClickSlap = false
                elseif not Args[2] then
                       States.ClickSlap = not States.ClickSlap
                end
                Notif('Successfully', "Click To Slap set to "..tostring(States.ClickSlap))
        elseif cm("clickkill") then
                if Args[2] == "on" or Args[2] == "true" then
                       States.ClickKill = true
                elseif Args[2] == "off" or Args[2] == "false" then
                       States.ClickKill = false
                elseif not Args[2] then
                       States.ClickKill = not States.ClickKill
                end
                Notif('Successfully', "Click To Kill set to "..tostring(States.ClickKill))
        elseif cm("autoslaptool") then
                if Args[2] == "on" or Args[2] == "true" then
                       States.AutoSlapTool = true
                elseif Args[2] == "off" or Args[2] == "false" then
                       States.AutoSlapTool = false
                elseif not Args[2] then
                       States.AutoSlapTool = not States.AutoSlapTool
                end
                if States.AutoSlapTool == true then
                       getSlap()
                end
                Notif('Successfully', "Auto Get Slap set to "..tostring(States.AutoSlapTool))
        elseif cm("void") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Void(DaPlayer)
                        Notif("Successfully", "Void "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        VoidAll()
                        Notif('Successfully', "Void All")
                elseif ar == "random" then
                        local DaRandom = GetRandomPlr()
                        if DaRandom ~= LocalPlayer then
                                Void(DaRandom)
                                Notif('Successfully', "Void "..DaRandom.DisplayName)
                        end
                elseif not DaPlayer then
                        Notif("Error", 'Not Player in Server')
                end
        elseif cm("loopvoid") then
                local DaPlayer = PlrFromArgs(Args[2])
                if DaPlayer then
                        Loops.Voids.Plr[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", 'Loop Void '..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Voids.All = true
                        Notif('Successfully', "Loop Void All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unloopvoid") then
                local DaPlayer = PlrFromArgs(Args[2])
                if DaPlayer then
                        Loops.Voids.Plr[DaPlayer.UserId] = nil
                        Notif("Successfully", 'Stopped loop Void '..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Voids.All = false
                        Notif('Successfully', "Stopped loop Void All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("autoflyingcarpet") or cm("autocarpet") then
                if Args[2] == "on" or Args[2] == "true" then
                       States.AutoFlyingCarpet = true
                elseif Args[2] == "off" or Args[2] == "false" then
                       States.AutoFlyingCarpet = false
                elseif not Args[2] then
                       States.AutoFlyingCarpet = not States.AutoFlyingCarpet
                end
                if States.AutoFlyingCarpet == true then
                       getFlyingCarpet()
                end
                Notif('Successfully', "Auto Get Flying Carpet set to "..tostring(States.AutoFlyingCarpet))
        elseif cm("flyingcarpet") or cm("carpet") then
                getFlyingCarpet()
                Notif("Successfully", "Get Flying Carpet")
        elseif cm("cmds") or cm("commands") then
                game:FindService("StarterGui"):SetCore("DevConsoleVisible", true)
                Notif("Successfully", "Show a commands")
        else
                Notif("Error", tostring(Args[1]).." is a valid command.")
        end
end
Connections.CharacterAdded = LocalPlayer.CharacterAdded:Connect(function(NewCharacter)
        if Unloaded then return end
        repeat game.RunService.Stepped:Wait() until NewCharacter
        NewCharacter:WaitForChild("HumanoidRootPart")
        NewCharacter:WaitForChild("Head")
        NewCharacter:WaitForChild("Humanoid").BreakJointsOnDeath = true
        NewCharacter:WaitForChild("Humanoid").Died:Connect(function()
	      if not Unloaded and States.AutoRespawn then
		     SavedPositions.OldCFramePos = LocalPlayer.Character.HumanoidRootPart.CFrame
	      end
        end)
        if SavedPositions.OldCFramePos then
              for i = 1,15 do
                     LocalPlayer.Character.HumanoidRootPart.CFrame = SavedPositions.OldCFramePos
              end
              wait(.05)
              SavedPositions.OldCFramePos = nil
        end
        if States.AutoSlapTool then
              wait(.1)
              getSlap()
        end
        if States.AutoFlyingCarpet then
              wait(.15)
              getFlyingCarpet()
        end
end)
Connections.PlayerAdded = Players.PlayerAdded:Connect(function(plr)
        if Loops.Slaps.Plr[plr.UserId] then
		Loops.Slaps.Plr[plr.UserId] = plr
	end
        if Whitelisted[plr.UserId] then
                Whitelisted[plr.UserId] = plr
        end
        if Loops.Slaps.Aura[plr.UserId] then
                Loops.Slaps.Aura[plr.UserId] = plr
        end
        if Loops.Goto[plr.UserId] then
                Loops.Goto[plr.UserId] = plr
        end
        if Loops.Kills.Plr[plr.UserId] then
                Loops.Kills.Plr[plr.UserId] = plr
        end
        if Loops.Voids.Plr[plr.UserId] then
                Loops.Voids.Plr[plr.UserId] = plr
        end
end)
Connections.PlayerRemoving = Players.PlayerRemoving:Connect(function(tar)
        if ViewPlr[tar.UserId] then
                wait(.05)
                workspace.CurrentCamera.CameraSubject = LocalPlayer.Character
                Notif("Error", "Player in left")
        end
end)
Connections.Chatted = LocalPlayer.Chatted:Connect(function(t)
	if not chatdebounce then
		chatdebounce = true
		OnCommand(t)
	end
        task.wait(.5)
        chatdebounce = false
end)
Connections.Focus = ExecBar.FocusLost:Connect(function(enterPressed, inputObj)
	if ExecBar.Text == "" then
		return
	end
	if enterPressed then
		local success, errors = pcall(function()
			if string.sub(ExecBar.Text, 0, 1) == Prefix then
				OnCommand(ExecBar.Text)
			else
				OnCommand(Prefix .. ExecBar.Text)
			end
		end)
		if not success then
			--nothing
		end
		task.wait(.2)
		ExecBar.Text = ""
	end
end)
Connections.Button1Up = LocalPlayer:GetMouse().Button1Up:Connect(function()
	local target = LocalPlayer:GetMouse().Target
	if not Unloaded and target and target.Parent:FindFirstChildOfClass("Humanoid") and game:GetService("Players"):FindFirstChild(target.Parent.Name) and States.ClickSlap then
		local Vic = game:GetService("Players"):FindFirstChild(target.Parent.Name)
		Slap(Vic)
	else
                if not Unloaded and target and target.Parent:FindFirstChildOfClass("Humanoid") and game:GetService("Players"):FindFirstChild(target.Parent.Name) and States.ClickKill then
		        local Vic = game:GetService("Players"):FindFirstChild(target.Parent.Name)
		        Kill(Vic)
                end
	end
end)
task.spawn(function()
        task0 = function()
                if Loops.Slaps.All then
                        SlapAll()
                end
                if Loops.Slaps.Plr then
			for i,v in next, Loops.Slaps.Plr do
				Slap(v)
			end
                end
                if Loops.Slaps.Aura then
                        for i,v in next, Loops.Slaps.Aura do
				if v.Character then
					local VPart = v.Character:FindFirstChildWhichIsA("BasePart")
					for _, Targets in pairs(Players:GetPlayers()) do
						if Targets ~= v and Targets.Character then
							local TPart = Targets.Character:FindFirstChildWhichIsA("BasePart")
							if VPart and TPart and CheckWhitelist(Targets) and Targets ~= LocalPlayer then
								if (TPart.Position-VPart.Position).Magnitude <= 10 then
									Slap(Targets)
								end
							end
						end
					end
				end
			end
                end
        end
        while task.wait() do
                pcall(task0)
                if Unloaded then
                        break
                end
        end
end)
spawn(function()
        task1 = function()
                if Loops.Goto then
                        for _,Target in next, Loops.Goto do
                                LocalPlayer.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame
                        end
                end
                if Loops.Kills.Plr then
                        for _,Target in next, Loops.Kills.Plr do
                                Kill(Target)
                        end
                end
                if Loops.Voids.All then
                        VoidAll()
                end
        end
        while task.wait() do
                pcall(task1)
                if Unloaded then
                        break
                end
        end
end)
spawn(function()
        task2 = function()
                if Loops.Kills.All then
                        KillAll()
                end
                if Loops.Kills.Aura then
                        for i,v in next, Loops.Kills.Aura do
				if v.Character then
					local VPart = v.Character:FindFirstChildWhichIsA("BasePart")
					for _, Targets in pairs(Players:GetPlayers()) do
						if Targets ~= v and Targets.Character then
							local TPart = Targets.Character:FindFirstChildWhichIsA("BasePart")
							if VPart and TPart and CheckWhitelist(Targets) and Targets ~= LocalPlayer then
								if (TPart.Position-VPart.Position).Magnitude <= 10 then
									Kill(Targets)
								end
							end
						end
					end
				end
			end
                end
                if Loops.Voids.Aura then
                        for i,v in next, Loops.Voids.Aura do
				if v.Character then
					local VPart = v.Character:FindFirstChildWhichIsA("BasePart")
					for _, Targets in pairs(Players:GetPlayers()) do
						if Targets ~= v and Targets.Character then
							local TPart = Targets.Character:FindFirstChildWhichIsA("BasePart")
							if VPart and TPart and CheckWhitelist(Targets) and Targets ~= LocalPlayer then
								if (TPart.Position-VPart.Position).Magnitude <= 10 then
									Void(Targets)
								end
							end
						end
					end
				end
			end
                end
        end
        while task.wait() do
                pcall(task2)
                if Unloaded then
                        break
                end
        end
end)
spawn(function()
        task3 = function()
                if Loops.Voids.Plr then
			for i,v in next, Loops.Voids.Plr do
				Void(v)
			end
                end
        end
        while task.wait() do
                pcall(task3)
                if Unloaded then
                        break
                end
        end
end)
local ScreenGui = Instance.new("ScreenGui")
local SpamBtn = Instance.new("TextButton")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = true

SpamBtn.Name = "SpamBtn"
SpamBtn.Parent = ScreenGui
SpamBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
SpamBtn.Position = UDim2.new(0, 0, 0.395768493, 0)
SpamBtn.Size = UDim2.new(0, 100, 0, 45)
SpamBtn.Font = Enum.Font.Arcade
SpamBtn.Text = "Slap Power"
SpamBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
SpamBtn.TextScaled = true
SpamBtn.TextSize = 14.000
SpamBtn.TextStrokeTransparency = 0.000
SpamBtn.TextWrapped = true
SpamBtn.Visible = true
SpamBtn.Draggable = false
SpamBtn.MouseButton1Click:Connect(function()
      local tool = FindCharacterSlapTool()
      if tool then
        SlapPower()
        Notif("Successfully", "Activated Slap Power")
        wait(2)
        Notif("Successfully", "Slap Power infinite")
      else
        Notif("Error", "Not Slap Gloves")
      end
end)
Refresh()
Notif("Trolls Cant Break Tower", "Script Loaded!")
wait(.5)
g = hookfunction(wait, function(seconds)
if States.LessCooldown then
return g(0)
end
end)
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not Unloaded then
	        if input.KeyCode == Enum.KeyCode.M and not Key then
		        Key = true
                        LocalScript()
                end
	end
end)

if not Unloaded then
local VirtualInputManager = game:GetService("VirtualInputManager") or game:FindFirstDescendant("VirtualInputManager")

local ScreenGui = Instance.new("ScreenGui")
local SpamBtn = Instance.new("TextButton")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = true

SpamBtn.Name = "SpamBtn"
SpamBtn.Parent = ScreenGui
SpamBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
SpamBtn.Position = UDim2.new(0, 0, 0.395768493, 0)
SpamBtn.Size = UDim2.new(0, 100, 0, 45)
SpamBtn.Font = Enum.Font.Arcade
SpamBtn.Text = "Scam Press M"
SpamBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
SpamBtn.TextScaled = true
SpamBtn.TextSize = 14.000
SpamBtn.TextStrokeTransparency = 0.000
SpamBtn.TextWrapped = true
SpamBtn.Visible = true
SpamBtn.Draggable = false
SpamBtn.MouseButton1Click:Connect(function()
      VirtualInputManager:SendKeyEvent(true,"M",false,game)
      ScreenGui:Destroy()
end)
end
