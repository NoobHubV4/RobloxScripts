local Prefix = ";"
local Players = game.Players
local LocalPlayer = Players.LocalPlayer
local Unloaded = true

local Notif = function(Title, Text, Duration)
	local Duration = Duration
	if not Duration then
		Duration = 3
	end
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = Title;
		Text = Text;
		Icon = "";
		Duration = Duration;
	})
end

Notif("Checking", "Check Id Game")
if game.PlaceId == 14493533447 then
        Unloaded = false
        Notif("Successfully", "Game Support", 10)
else
        Notif("Error", "Game Not Support")
        safeWait(5)
        game:FindService("TeleportService"):Teleport(14493533447)
end

if not Unloaded then
local Whitelisted = {}
local Loops = {
      Slaps = {
      All = false,
      Plr = {},
      Auras = {},
      },
}
local ScreenGui = Instance.new("ScreenGui", game.Players.LocalPlayer.PlayerGui)
ScreenGui.Name = "ScreenGui"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false
local ExecBar = Instance.new("TextBox", ScreenGui)
ExecBar.Name = "ExecBar"
ExecBar.BackgroundColor3 = Color3.fromRGB(172, 172, 172)
ExecBar.BackgroundTransparency = 0.400
ExecBar.Position = UDim2.new(0.0255349874, 0, 0.800595582, 0)
ExecBar.Size = UDim2.new(0, 278, 0, 33)
ExecBar.Font = Enum.Font.SourceSans
ExecBar.PlaceholderText = "Command Bar"
ExecBar.PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
ExecBar.Text = ""
ExecBar.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecBar.TextSize = 23.000
ExecBar.ClearTextOnFocus = false
ExecBar.Draggable = true

function getRemote()
        local char = LocalPlayer.Character
        local back = LocalPlayer.Backpack

        local tool = char:FindFirstChild("GoldSlapTool") or char:FindFirstChild("BlueSlapTool") or back:FindFirstChild("GoldSlapTool") or back:FindFirstChild("BlueSlapTool")
        if not tool then
                return Notif("Error", "Not Tool")
        elseif tool:IsA("Tool") and tool:FindFirstChild("Event") then
                return tool.Event
        end
end

function CheckWhitelist(args)
        return not (Whitelisted[args.UserId])
end

function CPing(ConvertToHuman, OneWayTrip)
	if ConvertToHuman then
		return OneWayTrip and LocalPlayer:GetNetworkPing() * 1000 or game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()
	else
		return OneWayTrip and LocalPlayer:GetNetworkPing() or game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue() / 1000
	end
end

local PlrFromArgs = function(plr, args)
	if plr and plr:lower() == "me" then
		return args
        elseif plr and plr:lower() == "random" then
        local DaPlayers = Players:GetPlayers()
	local DaIndex = math.random(1, #DaPlayers)
	local ToReturn = DaPlayers[DaIndex]
	if args and ToReturn.UserId == args.UserId then
		DaPlayers = Players:GetPlayers(); DaIndex = math.random(1, #DaPlayers); ToReturn = DaPlayers[DaIndex]
	end
	return ToReturn
	elseif not plr and not args then
		return false
	elseif not plr and args then
		return args
	end
	local foundplr = false
	for i,v in pairs(Players:GetPlayers()) do
		local Name, DisplayName = v.Name:lower(), v.DisplayName:lower()
		if Name:sub(1, #plr) == plr:lower() or DisplayName:sub(1, #plr) == plr:lower() then
			foundplr = v
		end
	end
	return foundplr
end

function Slap(arg)
        local remote = getRemote()
        local targetPart = arg.Character and arg.Character:FindFirstChild("HumanoidRootPart")
                if targetPart then
                        coroutine.wrap(function()
                            pcall(function()
                                -- Fire remote with extreme upward force
                                remote:FireServer("slash", arg.Character, targetPart.Position, Vector3.new(0, 500000, 0))
                                -- Apply massive upward velocity to target
                                if targetPart and targetPart.Parent:FindFirstChild("BodyVelocity") == nil then
                                    local bodyVelocity = Instance.new("BodyVelocity")
                                    bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
                                    bodyVelocity.Velocity = Vector3.new(0, SLAP_POWER, 0)
                                    bodyVelocity.Parent = targetPart
                                    game.Debris:AddItem(bodyVelocity, 0.5)
                                end
                            end)
                        end)()
                end
end

function SlapAll()
        local remote = getRemote()
        for _, arg in pairs(Players:GetPlayers()) do
                  if arg ~= LocalPlayer and CheckWhitelist(arg) then
        local targetPart = arg.Character and arg.Character:FindFirstChild("HumanoidRootPart")
                if targetPart then
                        coroutine.wrap(function()
                            pcall(function()
                                -- Fire remote with extreme upward force
                                remote:FireServer("slash", arg.Character, targetPart.Position, Vector3.new(0, 500000, 0))
                                -- Apply massive upward velocity to target
                                if targetPart and targetPart.Parent:FindFirstChild("BodyVelocity") == nil then
                                    local bodyVelocity = Instance.new("BodyVelocity")
                                    bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
                                    bodyVelocity.Velocity = Vector3.new(0, SLAP_POWER, 0)
                                    bodyVelocity.Parent = targetPart
                                    game.Debris:AddItem(bodyVelocity, 0.5)
                                end
                            end)
                        end)()
                end
                                end
                      end
end

local chatdebounce = false
function OnCommand(text)
        local Args = text:split(" ")
	if not Args[1] then
		chatdebounce = nil
		return
	end
	if Args[1] == "/e" or Args[1] == "/c" or Args[1] == "/t" or Args[1] == "/" then
		table.remove(Args, 1)
	end
	if Args[1] == "/w" then
		table.remove(Args, 1)
		if Args[2] then
			table.remove(Args, 1)
		end
	end
	if not (Args[1]:sub(1, #Prefix) == Prefix) then
		chatdebounce = nil
		return
	end
	local function cm(args)
		return args == Args[1]:sub(#Prefix+1):lower()
	end
        if cm("slap") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Slap(DaPlayer)
                        Notif("Successfully", "Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        SlapAll()
                        Notif("Successfully", "Slap All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("loopslap") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Slaps.Plr[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Loop Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Slaps.All = true
                        Notif("Successfully", "Loop Slap All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unloopslap") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Loops.Slaps.Plr[DaPlayer.UserId] = nil
                        Notif("Successfully", "Loop Slap "..DaPlayer.DisplayName)
                end
                local ar = Args[2] and Args[2]:lower()
                if ar == "all" then
                        Loops.Slaps.All = false
                        Notif("Successfully", "UnLoop Slap All")
                elseif not DaPlayer then
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("whitelist") or cm("wl") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Whitelisted[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Whitelist "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unwhitelist") or cm("unwl") then
                local DaPlayer = PlrFromArgs(Args[2], false)
                if DaPlayer then
                        Whitelisted[DaPlayer.UserId] = nil
                        Notif("Successfully", "Blacklist "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("slapaura") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Loops.Slaps.Auras[DaPlayer.UserId] = DaPlayer
                        Notif("Successfully", "Give slapaura "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        elseif cm("unslapaura") then
                local DaPlayer = PlrFromArgs(Args[2], LocalPlayer)
                if DaPlayer then
                        Loops.Slaps.Auras[DaPlayer.UserId] = nil
                        Notif("Successfully", "Revoke slapaura "..DaPlayer.DisplayName)
                else
                        Notif("Error", "Not Player in Server")
                end
        else
                Notif("Error", tostring(Args[1]).." is a valid command.")
        end
end
Players.PlayerAdded:Connect(function(plr)
        if Loops.Slaps.Plr[plr.UserId] then
		Loops.Slaps.Plr[plr.UserId] = plr
	end
        if Whitelisted[plr.UserId] then
                Whitelisted[plr.UserId] = plr
        end
        if Loops.Slaps.Auras[plr.UserId] then
                Loops.Slaps.Auras[plr.UserId] = plr
        end
end)
LocalPlayer.Chatted:Connect(function(t)
	if not chatdebounce then
		chatdebounce = true
		local success, errors = pcall(function()
			OnCommand(t)
		end); if not success then
			-- nothing
		end
		task.wait(.6);chatdebounce = nil
	end
end)
ExecBar.FocusLost:Connect(function(enterPressed, inputObj)
	if ExecBar.Text == "" then
		return
	end
	if enterPressed then
		local success, errors = pcall(function()
			if string.sub(ExecBar.Text, 0, 1) == Prefix then
				OnCommand(ExecBar.Text)
			else
				OnCommand(Prefix .. ExecBar.Text)
			end
		end)
		if not success then
			--nothing
		end
		task.wait(.2)
		ExecBar.Text = ""
	end
end)
task.spawn(function()
        task0 = function()
                if Loops.Slaps.All then
                        SlapAll()
                        wait(CPing(nil, true) / 2)
                else
                        if Loops.Slaps.Plr then
				for i,v in next, Loops.Slaps.Plr do
					Slap(v)
				end
			end
                end
                if Loops.Slaps.Auras then 
                        for _,Plr in next, Loops.Slaps.Auras do
                                for i,v in pairs(Players:GetPlayers()) do
                                        if v ~= Plr then
                                                if (v.Character.HumanoidRootPart.Position - Plr.Character.HumanoidRootPart.Position).Magnitude < 10 then
                                                        Slap(v)
                                                end
                                        end
                                end
                        end
                        wait(CPing(nil, true) / 2)
                end
        end
        while wait(.02) do
                pcall(task0)
                if Unloaded then
                        break
                end
        end
end)
end
